import matplotlib.pyplot as plt
import numpy as np


# """ 地图数据结构 """
map_data = {
    '2, 7: 6, 3': {'point_x': [2, 7], 'point_y': [6, 3], 'relation_graph': ['a', 'b']},
    '7, 3: 7, 3': {'point_a': [7, 4], 'point_b': [3, 8], 'relation_graph': ['a', 'b']},
    '1, 4: 7, 3': {'point_a': [2, 4], 'point_b': [6, 8], 'relation_graph': ['a', 'b']},
}
# p1 = [2, 7]  # 数据点
# p2 = [6, 3]  # 数据点
# p3 = [7, 4]  # 数据点
# p4 = [3, 8]  # 数据点
# p5 = [2, 4]  # 数据点
# p6 = [6, 8]  # 数据点


def show_map(test_point, _ll):
    _len = len(_ll)
    plt.figure('Draw')
    for _, v in enumerate(_ll):
        x1, y1 = _ll[_][0], _ll[_][-1]
        _ += 1
        if _ >= _len:
            _ = 0
        x2, y2 = _ll[_][0], _ll[_][-1]
        plt.plot([x1, x2], [y1, y2])
    plt.plot(test_point['x'], test_point['y'], 'om')
    plt.show()


ll = [[113.891201,27.870971],[113.933333,27.910491],[113.947128,27.899966],[114.002245,27.953458],[113.989282,27.974039],[113.961792,27.967389],[113.951569,27.986311],[113.928921,27.984370],[113.918462,28.000729],[113.934354,28.018347],[113.966434,28.018450],[113.960313,28.037491],[114.022265,28.032484],[114.046428,28.059260],[114.021825,28.082521],[114.016686,28.121095],[113.994695,28.154851],[114.005994,28.165918],[114.011268,28.174404],[114.068684,28.171647],[114.107825,28.184392],[114.106653,28.201617],[114.144443,28.243707],[114.180555,28.249789],[114.183927,28.265561],[114.198398,28.269775],[114.196794,28.286599],[114.254106,28.320899],[114.249533,28.343652],[114.261285,28.352223],[114.249879,28.365980],[114.259136,28.378253],[114.252481,28.395724],[114.214636,28.403053],[114.202254,28.424437],[114.178707,28.433271],[114.219331,28.470539],[114.214826,28.486309],[114.168913,28.499336],[114.135250,28.536196],[114.100683,28.540314],[114.086200,28.558326],[114.129225,28.602639],[114.122790,28.620109],[114.132664,28.656215],[114.122416,28.689460],[114.141545,28.705076],[114.158103,28.774522],[114.212259,28.827130],[114.228673,28.803683],[114.259561,28.804673],[114.275776,28.762565],[114.349570,28.704057],[114.426866,28.715578],[114.465502,28.696891],[114.460743,28.722755],[114.482563,28.751464],[114.566890,28.769347],[114.579876,28.762038],[114.586373,28.729716],[114.620263,28.698058],[114.652623,28.687051],[114.737876,28.687654],[114.799128,28.725696],[114.797233,28.750613],[114.812072,28.769415],[114.837677,28.743932],[114.872875,28.755796],[114.879436,28.774260],[114.892613,28.769845],[114.918413,28.805177],[114.905989,28.824970],[114.911540,28.856200],[114.953639,28.876656],[114.950984,28.921936],[114.970561,28.942626],[114.964756,28.966109],[114.996243,29.007630],[115.039554,29.012690],[115.050627,29.030437],[115.152795,29.076080],[115.220021,29.094653],[115.316088,29.099224],[115.446704,29.059942],[115.441159,29.039467],[115.468158,29.026519],[115.475046,29.005547],[115.465429,28.979390],[115.523243,28.889539],[115.530342,28.860347],[115.518144,28.839863],[115.496924,28.841944],[115.484307,28.801736],[115.438728,28.759951],[115.463718,28.724889],[115.521032,28.738656],[115.559514,28.729408],[115.547497,28.710943],[115.554534,28.688003],[115.545329,28.623067],[115.523901,28.608225],[115.524038,28.595939],[115.527775,28.582778],[115.571403,28.589380],[115.587325,28.573537],[115.563025,28.559023],[115.572578,28.519309],[115.545480,28.479061],[115.542933,28.444669],[115.554006,28.421049],[115.532225,28.394461],[115.555231,28.387266],[115.567824,28.399983],[115.585307,28.398377],[115.598311,28.417297],[115.618142,28.418007],[115.619463,28.401156],[115.654269,28.382698],[115.623542,28.345842],[115.651486,28.334848],[115.693749,28.353866],[115.668310,28.363167],[115.681583,28.373864],[115.726411,28.351815],[115.757316,28.368476],[115.777664,28.362154],[115.802074,28.385634],[115.802791,28.399853],[115.820131,28.401582],[115.847923,28.381555],[115.863210,28.343137],[115.859913,28.312707],[115.881741,28.286935],[115.903219,28.313247],[115.914492,28.303133],[115.924658,28.315591],[115.957688,28.298374],[115.953130,28.285932],[115.963642,28.276958],[115.979972,28.291055],[116.005351,28.279019],[116.041975,28.295948],[116.071352,28.291012],[116.116135,28.239018],[116.079021,28.154464],[116.102913,28.138273],[116.150805,28.128763],[116.135841,28.094510],[116.149287,28.075495],[116.135775,28.044408],[116.119356,28.037191],[116.118203,28.005383],[116.057715,27.928576],[116.002652,27.897756],[115.910989,27.882275],[115.885053,27.854200],[115.868784,27.855160],[115.850376,27.749538],[115.833226,27.726264],[115.761202,27.745723],[115.735454,27.729881],[115.729647,27.759126],[115.694409,27.773722],[115.676054,27.819427],[115.615350,27.827173],[115.513064,27.894871],[115.531785,27.945704],[115.482303,27.954728],[115.460012,27.921571],[115.443293,27.934918],[115.436413,27.959979],[115.429135,27.961302],[115.430189,27.945697],[115.415337,27.954504],[115.397666,27.948037],[115.405659,27.912983],[115.384061,27.897971],[115.407049,27.878735],[115.378669,27.871197],[115.313433,27.870575],[115.299512,27.880805],[115.268424,27.867935],[115.234369,27.890159],[115.214066,27.874800],[115.148482,27.891908],[115.154925,27.895481],[115.135146,27.907600],[115.115637,27.954645],[115.137693,27.972016],[115.129855,28.000310],[115.149570,28.013598],[115.146041,28.038963],[115.160437,28.047405],[115.158802,28.067555],[115.145740,28.077673],[115.096079,28.082120],[115.057085,28.068303],[115.024043,28.081711],[114.993102,28.074793],[114.976858,28.093287],[114.923873,28.059271],[114.913472,28.029326],[114.883639,28.022430],[114.871349,28.047461],[114.791688,28.032958],[114.775800,28.052927],[114.785332,28.103353],[114.737461,28.106169],[114.701353,28.094043],[114.672014,28.104217],[114.620815,28.079805],[114.594965,28.081792],[114.572245,28.050559],[114.605514,27.986772],[114.566008,27.953107],[114.515992,27.950160],[114.523646,27.921538],[114.492199,27.917312],[114.485700,27.892328],[114.514511,27.826985],[114.544241,27.817988],[114.571602,27.841936],[114.581766,27.827994],[114.582852,27.801679],[114.560217,27.766713],[114.577411,27.775249],[114.584227,27.726049],[114.541453,27.662570],[114.528149,27.627221],[114.535949,27.606073],[114.512828,27.604460],[114.498429,27.579902],[114.465897,27.560398],[114.449527,27.568330],[114.414794,27.548258],[114.381894,27.557538],[114.367968,27.545489],[114.308787,27.575732],[114.275280,27.575080],[114.196726,27.639660],[114.217178,27.664226],[114.179371,27.729643],[114.158906,27.733842],[114.157842,27.748687],[114.121249,27.770201],[114.109551,27.753705],[114.069710,27.743751],[114.047752,27.742466],[114.020416,27.761804],[113.998481,27.752357],[113.978771,27.760078],[113.959355,27.786594],[113.967161,27.808304],[113.933690,27.806209],[113.933112,27.831243],[113.901082,27.833625],[113.896593,27.843241],[113.906732,27.841050],[113.911545,27.861707],[113.891201,27.870971]]


# show_map(ll)


def cross(p1, p2, p3):  # 跨立实验
    x1 = p2['x']-p1['x']
    y1 = p2['y']-p1['y']
    x2 = p3['x']-p1['x']
    y2 = p3['y']-p1['y']
    return x1*y2-x2*y1


def is_inter_sec(t1, t2, r3, r4):  # 判断两线段是否相交
    # 快速排斥，以l1、l2为对角线的矩形必相交，否则两线段不相交
    if max(t1['x'], t2['x']) >= min(r3['x'], r4['x']) and max(r3['x'], r4['x']) >= min(t1['x'], t2['x']) \
            and max(t1['y'], t2['y']) >= min(r3['y'], r4['y']) and max(r3['y'], r4['y']) >= min(t1['y'], t2['y']):
        # 若通过快速排斥则进行跨立实验
        if cross(t1, t2, r3)*cross(t1, t2, r4) <= 0 and cross(r3, r4, t1)*cross(r3, r4, t2) <= 0:
            return 1
        else:
            return 0
    else:
        return 0


def make_lines(_ll):
    _len = len(_ll)
    lines = []
    for _, v in enumerate(_ll):
        x1, y1 = _ll[_][0], _ll[_][-1]
        _ += 1
        if _ >= _len:
            _ = 0
        x2, y2 = _ll[_][0], _ll[_][-1]
        lines.append([{'x': x1, 'y': y1}, {'x': x2, 'y': y2}])
        # plt.plot([x1, x2], [y1, y2])
    return lines


def intersect_test(test_p, ll):
    n = 0
    t2 = {'x': 0, 'y': 0}
    for _ in make_lines(ll):
        r1, r2 = _[0], _[-1]
        if is_inter_sec(test_p, t2, r1, r2):
            n += 1
    print(n)
    return n


test_p = {'x': 115.791876, 'y': 29.166279}
intersect_test(test_p, ll)
show_map(test_p, ll)


"""
目的查找地图中某个点的地域归属：

步骤1：
    建立行政区域边界线库
        - 线条由起始点和结束点平面坐标表述；如： [[2, 6], [3, 7]]
        - 每个区域必须封闭
        - 数据结构
            以线条为主键：
                说明： point_s为线起始点； point_e为终点； relation_graph为和线相关的区块 即线是那一个或两个区块的边界；
                [
                    {'point_s': [2, 6], 'point_e': [7, 3], 'relation_graph': ['a', 'b']},
                    {'point_s': [7, 4], 'point_e': [3, 8], 'relation_graph': ['a', 'b']},
                    {'point_s': [2, 4], 'point_e': [6, 8], 'relation_graph': ['a', 'b']},
                    ......
                ]
            以区域为主键：
                说明： key：区域名， val：边界线条闭环；
                {
                    'area': [[[2, 6], [7, 3]], [[7, 3], [8, 4]], ......]，
                    ......
                }
            两种结构各有忧虑，不在此赘述；
        - 数据剪枝算法：
            目的：为避免边界数据条数过于巨大而应用剪枝算法：
            剪枝逻辑：
                - 设置精度阈值：即边界长度小于多少则使用剪枝算法与其他边界线条合并：
                - 其他阈值：如被合并线条夹角 与合并影响区域等是否设立阈值 减少剪枝对精度的影响；
        - 区域闭合算法：
            - 首尾一致验证法：即每个区域的线条的点是否都有另一个线条的点预其一致；
步骤2：
    计算被检测点所在区域：
        可能情况：相邻、被包含（如梵蒂冈）、超边界范围（如局部地图）；
        最近距离检验法：
            - 计算点与所有线条的距离；
            - 最近距离的线条所关联的区域；
                - 当结果不唯一： 如使用'以线条为主键'数据结构，则将会有两个相关地区；
                    - 延长线法：将线段向边界方向延长至两区域的最大值，相交线段为奇数则为所属地区：如都为奇数则说明一区被另一包含；                 
性能提升：
    边界分区：使用分区索引提高定位速度；
        如：将线段库或地区库按经纬度分区；根据输入的被检测点坐标选取分区内数据，极大减少需要搜索的边界数量；
    级联递归法：
        如：先检验省级定位所在省；再先去省内的数据定位所在市；
    根据精度需要对地图库进行剪枝：
        上边讲过 不再赘述：
    双精度剪枝：
        精度1：对长度小于精度的边界根据条件进行合并；
        精度2：对于夹角小于阈值的，或夹角引起的最终偏差小于精度的边界进行剪枝；如：精度为10米 两条长度为20米的边界 夹角小于1度，剪枝后的偏差小于1米，则将两条线合并；
"""
